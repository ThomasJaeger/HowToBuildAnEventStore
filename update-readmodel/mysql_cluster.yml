# CodePipeline for single lambda function
AWSTemplateFormatVersion: "2010-09-09"
Description: readmodel Stack

Parameters:
    RepoName:
        Type: String
        Default: readmodel
    VPCCidr:
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
        Default: 10.20.0.0/16
    SharedACidr:
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
        Default: 10.20.0.0/22
    SharedBCidr:
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
        Default: 10.20.4.0/22
    EnvironmentSize:
        Type: String
        Default: SMALL
        AllowedValues:
            - SMALL
            - MEDIUM
            - LARGE
        Description: Select Environment Size (S,M,L)
    DatabaseName:
        Type: String
        Default: readmodel
        Description: The database name to use
    DatabaseAdmin:
        Type: String
        Default: admin
        Description: The database master user name
    DatabasePassword:
        Type: String
        Default: 8F&3gkcFdtA*&Xv
        Description: The database master password
        #NoEcho: true

Mappings:
    InstanceSize:  # https://aws.amazon.com/ec2/instance-types/
        SMALL:
            "EC2"   : "t3.small"    # 2 GB on instance
            "DB": "db.t2.micro" # vCPU = 1, GB = 1
        MEDIUM:
            "EC2"   : "t3.medium"   # 4 GB on instance
            "DB": "db.t2.medium" # vCPU = 2, GB = 4
        LARGE:
            "EC2"   : "t3.large"    # 8 GB on instance
            "DB": "db.t2.large"    # vCPU = 2, GB = 8
        
Resources:
    # *********************************************
    # Network infrastrcuture needed for the cluster
    # *********************************************
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: !Ref VPCCidr
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: default
            Tags:
                - Key: Name
                  Value: !Sub ${RepoName}

    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs '']
            CidrBlock: !Ref SharedACidr
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${RepoName}

    Subnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [1, !GetAZs '']
            CidrBlock: !Ref SharedBCidr
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${RepoName}

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${RepoName}

    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${RepoName}

    RouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet1
            RouteTableId: !Ref RouteTable

    RouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref Subnet2
            RouteTableId: !Ref RouteTable

    InternetRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref RouteTable
            DestinationCidrBlock: '0.0.0.0/0'

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub ${RepoName}
            VpcId: !Ref VPC
            GroupDescription: Enable database access for lambda and admin MySQL tool
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 3306
                  ToPort: 3306
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 3306
                  ToPort: 3306
                  CidrIp: 0.0.0.0/0

    # ***************
    # MySQL
    # ***************
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: !Sub ${RepoName}
            DBSubnetGroupName: !Sub ${RepoName}
            SubnetIds:
                - !Ref Subnet1
                - !Ref Subnet2

    DB:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: !Sub ${RepoName}
            AllocatedStorage: 20
            StorageType: gp2  # SSD disks
            DBInstanceClass: !FindInMap [InstanceSize, !Ref EnvironmentSize, DB]
            DBName: !Ref DatabaseName
            Engine: MySQL
            EngineVersion: 5.7.23
            MasterUsername: !Ref DatabaseAdmin
            MasterUserPassword: !Ref DatabasePassword
            PubliclyAccessible: true
            VPCSecurityGroups: 
                - !Ref SecurityGroup
            DBSubnetGroupName: !Ref DBSubnetGroup

Outputs:    
    DBEndpoint:
        Description: MySQL endpoint address
        Value: !GetAtt DB.Endpoint.Address

    ConnectionString:
        Description: MySQL connection string
        Value: !Sub Server=${DB.Endpoint.Address}; Database=${DatabaseName}; Uid=${DatabaseAdmin}; Pwd=${DatabasePassword}; Pooling=true;
        Export:
            Name: !Sub global-mysql-connection-string
